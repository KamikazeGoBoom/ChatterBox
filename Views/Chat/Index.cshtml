@{
    ViewData["Title"] = "Chat";
}

<div class="container">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    My Status
                </div>
                <div class="card-body">
                    <select id="statusSelect" class="form-control">
                        <option value="Online">Online</option>
                        <option value="Away">Away</option>
                        <option value="Busy">Busy</option>
                        <option value="Do Not Disturb">Do Not Disturb</option>
                    </select>
                </div>
            </div>
            <div class="card mt-3">
                <div class="card-header">
                    Online Users
                </div>
                <div class="card-body">
                    <div id="onlineUsersList" class="list-group">
                        <!-- Users will be populated here -->
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Chat Messages</span>
                    <div class="d-flex align-items-center">
                        <span id="userTypingIndicator" class="text-muted me-3" style="display: none;"></span>
                        <span id="selectedUserName" class="text-muted"></span>
                        <small id="userStatus" class="ms-2 badge bg-secondary"></small>
                    </div>
                </div>
                <div class="card-body">
                    <div id="messagesList" class="chat-messages" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 10px;">
                        <div class="alert alert-info">Please select a contact to start chatting.</div>
                    </div>
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." disabled>
                        <div class="input-group-append">
                            <button class="btn btn-primary" id="sendButton" disabled>Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect([0, 2000, 5000, 10000])
            .build();

        let selectedUserId = null;
        let currentUserName = '';
        let typingTimer = null;
        const unreadMessages = new Map();

        // Initialize from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        selectedUserId = urlParams.get('userId');

        // Time formatting function for Philippines timezone (UTC+8)
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('en-PH', {
                timeZone: 'Asia/Manila',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true,
                month: 'short',
                day: '2-digit',
                year: 'numeric'
            });
        }

        async function startConnection() {
            try {
                await connection.start();
                console.log("Connected to SignalR hub");
                await loadOnlineUsers();

                if (selectedUserId) {
                    enableChat();
                    await loadUserInfo(selectedUserId);
                    await loadPreviousMessages(selectedUserId);
                }
            } catch (err) {
                console.error("Error connecting:", err);
                setTimeout(startConnection, 5000);
            }
        }

        // Handle connection events
        connection.onclose(async () => {
            console.log("Connection closed. Attempting to reconnect...");
            await startConnection();
        });

        connection.onreconnecting(() => {
            console.log("Attempting to reconnect...");
            showConnectionStatus("Reconnecting...", "warning");
        });

        connection.onreconnected(() => {
            console.log("Reconnected");
            showConnectionStatus("Connected", "success");
            loadOnlineUsers();
        });

        async function loadOnlineUsers() {
            try {
                const response = await fetch('/Contacts/GetContacts');
                const contacts = await response.json();
                updateOnlineUsersList(contacts);
            } catch (error) {
                console.error('Error loading online users:', error);
                showError('Failed to load contacts');
            }
        }

        function updateOnlineUsersList(users) {
            const onlineUsersList = document.getElementById('onlineUsersList');
            onlineUsersList.innerHTML = '';

            users.forEach(user => {
                const userElement = document.createElement('a');
                userElement.href = '#';
                userElement.className = `list-group-item list-group-item-action d-flex justify-content-between align-items-center
                    ${user.id === selectedUserId ? 'active' : ''}`;
                userElement.onclick = (e) => {
                    e.preventDefault();
                    startChat(user.id);
                };

                const userContent = document.createElement('div');
                userContent.className = 'd-flex flex-column';

                const nameSpan = document.createElement('span');
                nameSpan.textContent = user.userName;

                const statusBadge = document.createElement('span');
                statusBadge.id = `status-${user.id}`;
                statusBadge.className = `badge ${getStatusBadgeClass(user.status)}`;
                statusBadge.textContent = user.status || 'Offline';

                const unreadBadge = document.createElement('span');
                unreadBadge.id = `unread-${user.id}`;
                unreadBadge.className = 'badge bg-danger';
                unreadBadge.style.display = 'none';
                unreadBadge.textContent = '0';

                userContent.appendChild(nameSpan);
                userContent.appendChild(statusBadge);
                userElement.appendChild(userContent);
                userElement.appendChild(unreadBadge);
                onlineUsersList.appendChild(userElement);

                // Update unread count if exists
                const unreadCount = unreadMessages.get(user.id);
                if (unreadCount) {
                    updateUnreadBadge(user.id, unreadCount);
                }
            });
        }

        function getStatusBadgeClass(status) {
            switch (status?.toLowerCase()) {
                case 'online': return 'bg-success';
                case 'away': return 'bg-warning';
                case 'busy': return 'bg-danger';
                case 'do not disturb': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        function startChat(userId) {
            selectedUserId = userId;
            history.pushState(null, '', `/Chat?userId=${userId}`);
            enableChat();
            loadUserInfo(userId);
            loadPreviousMessages(userId);

            // Clear unread messages for this user
            updateUnreadBadge(userId, 0);
            unreadMessages.delete(userId);
        }

        function enableChat() {
            document.getElementById("messageInput").disabled = false;
            document.getElementById("sendButton").disabled = false;
        }

        function showConnectionStatus(message, type) {
            const messagesList = document.getElementById("messagesList");
            const statusDiv = document.createElement("div");
            statusDiv.className = `alert alert-${type}`;
            statusDiv.textContent = message;
            messagesList.appendChild(statusDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        function appendMessage(message, isReceived) {
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            messageDiv.className = `chat-message ${isReceived ? 'received' : 'sent'}`;
            messageDiv.innerHTML = `
                <div class="message-content">
                    <div class="message-header">
                        <strong>${message.senderName}</strong>
                        <small class="text-muted">${new Date(message.timestamp || message.sentAt).toLocaleTimeString()}</small>
                    </div>
                    <div class="message-body">${escapeHtml(message.content)}</div>
                </div>
            `;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;

            // Mark message as read if we're the receiver
            if (isReceived && message.messageId) {
                connection.invoke("MarkMessageAsRead", message.messageId);
            }
        }

        function updateUnreadBadge(userId, count) {
            const badge = document.getElementById(`unread-${userId}`);
            if (badge) {
                badge.textContent = count;
                badge.style.display = count > 0 ? 'inline' : 'none';
            }
        }

        // SignalR event handlers
        connection.on("ReceiveMessage", function (message) {
            console.log("Received message:", message);

            if (selectedUserId === message.senderId) {
                appendMessage(message, true);
            } else {
                // Update unread count for sender
                const currentCount = unreadMessages.get(message.senderId) || 0;
                unreadMessages.set(message.senderId, currentCount + 1);
                updateUnreadBadge(message.senderId, currentCount + 1);

                // Show notification
                showNotification(message.senderName, message.content);
            }
        });

        connection.on("MessageSent", function (message) {
            console.log("Sent message:", message);
            appendMessage(message, false);
        });

        connection.on("UserStatusUpdated", function (userId, status) {
            console.log("Status updated:", userId, status);
            const statusElement = document.getElementById(`status-${userId}`);
            if (statusElement) {
                statusElement.textContent = status;
                statusElement.className = `badge ${getStatusBadgeClass(status)}`;
            }

            // Update status in chat header if it's the selected user
            if (selectedUserId === userId) {
                updateSelectedUserStatus(status);
            }
        });

        connection.on("UserConnected", function (userId) {
            console.log("User connected:", userId);
            updateUserStatus(userId, "Online");
        });

        connection.on("UserDisconnected", function (userId) {
            console.log("User disconnected:", userId);
            updateUserStatus(userId, "Offline");
        });

        connection.on("MessageRead", function (messageId) {
            console.log("Message read:", messageId);
            // Update UI to show message has been read
            const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
            if (messageElement) {
                messageElement.classList.add('read');
            }
        });

        // UI Event handlers
        document.getElementById("sendButton").addEventListener("click", sendMessage);
        document.getElementById("messageInput").addEventListener("keypress", function (event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });

        document.getElementById("statusSelect").addEventListener("change", function (event) {
            connection.invoke("UpdateStatus", event.target.value)
                .catch(function (err) {
                    console.error(err);
                    showError('Failed to update status');
                });
        });

        // Helper functions
        async function sendMessage() {
            if (!selectedUserId) return;

            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (message) {
                messageInput.value = "";

                try {
                    await connection.invoke("SendMessage", selectedUserId, message);
                } catch (error) {
                    console.error(error);
                    showError('Failed to send message');
                    messageInput.value = message; // Restore message on failure
                }
            }
        }

        function updateUserStatus(userId, status) {
            const statusElement = document.getElementById(`status-${userId}`);
            if (statusElement) {
                statusElement.textContent = status;
                statusElement.className = `badge ${getStatusBadgeClass(status)}`;
            }
        }

        async function loadUserInfo(userId) {
            try {
                const response = await fetch(`/Contacts/GetUser/${userId}`);
                const user = await response.json();
                document.getElementById('selectedUserName').textContent = `Chatting with: ${user.userName}`;
                currentUserName = user.userName;
                updateSelectedUserStatus(user.status);
            } catch (error) {
                console.error('Error loading user info:', error);
                showError('Failed to load user information');
            }
        }

        async function loadPreviousMessages(userId) {
            try {
                const response = await fetch(`/Chat/GetMessages?userId=${userId}`);
                const messages = await response.json();

                const messagesList = document.getElementById("messagesList");
                messagesList.innerHTML = '';

                messages.forEach(message => {
                    appendMessage(message, message.senderId === selectedUserId);
                });

                messagesList.scrollTop = messagesList.scrollHeight;
            } catch (error) {
                console.error('Error loading messages:', error);
                showError('Failed to load message history');
            }
        }

        function updateSelectedUserStatus(status) {
            const userStatus = document.getElementById('userStatus');
            userStatus.textContent = status;
            userStatus.className = `ms-2 badge ${getStatusBadgeClass(status)}`;
        }

        function showNotification(title, message) {
            if (Notification.permission === "granted") {
                new Notification(title, {
                    body: message,
                    icon: '/favicon.ico'
                });
            } else if (Notification.permission !== "denied") {
                Notification.requestPermission().then(permission => {
                    if (permission === "granted") {
                        new Notification(title, {
                            body: message,
                            icon: '/favicon.ico'
                        });
                    }
                });
            }
        }

        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger alert-dismissible fade show';
            errorDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.card-body').insertBefore(errorDiv, document.getElementById('messagesList'));

            setTimeout(() => {
                errorDiv.remove();
            }, 5000);
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Request notification permission on page load
        document.addEventListener('DOMContentLoaded', function() {
            if ("Notification" in window) {
                Notification.requestPermission();
            }
        });

        // Start the connection
        startConnection();
    </script>
}