@{
    ViewData["Title"] = "Chat";
}

<div class="container">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    My Status
                </div>
                <div class="card-body">
                    <select id="statusSelect" class="form-control">
                        <option value="Online">Online</option>
                        <option value="Away">Away</option>
                        <option value="Busy">Busy</option>
                        <option value="Do Not Disturb">Do Not Disturb</option>
                    </select>
                </div>
            </div>
            <div class="card mt-3">
                <div class="card-header">
                    Online Users
                </div>
                <div class="card-body">
                    <ul id="onlineUsersList" class="list-group">
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    Chat Messages
                    <span id="selectedUserName" class="text-muted"></span>
                </div>
                <div class="card-body">
                    <div id="messagesList" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 10px;">
                        <div class="alert alert-info">Please select a contact to start chatting.</div>
                    </div>
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." disabled>
                        <div class="input-group-append">
                            <button class="btn btn-primary" id="sendButton" disabled>Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        // Get selected user ID from URL
        const urlParams = new URLSearchParams(window.location.search);
        const selectedUserId = urlParams.get('userId');

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        // Start the connection
        connection.start()
            .then(() => {
                console.log("Connected to SignalR hub");
                if (selectedUserId) {
                    document.getElementById("messageInput").disabled = false;
                    document.getElementById("sendButton").disabled = false;
                    // Load user info and previous messages
                    loadUserInfo(selectedUserId);
                    loadPreviousMessages(selectedUserId);
                }
            })
            .catch(err => console.error(err));

        // Handle receiving messages
        connection.on("ReceiveMessage", function (message) {
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            const isReceived = message.senderId === selectedUserId;

            messageDiv.classList.add("alert", isReceived ? "alert-info" : "alert-success", "mb-2");
            messageDiv.textContent = `${message.senderName} (${new Date(message.timestamp).toLocaleTimeString()}): ${message.content}`;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        });

        // Handle user status changes
        connection.on("UserStatusUpdated", function (userId, status) {
            updateUserStatus(userId, status);
        });

        connection.on("UserConnected", function (userId) {
            updateUserStatus(userId, "Online");
        });

        connection.on("UserDisconnected", function (userId) {
            updateUserStatus(userId, "Offline");
        });

        // Send message when button is clicked
        document.getElementById("sendButton").addEventListener("click", sendMessage);

        // Also send message when Enter key is pressed
        document.getElementById("messageInput").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        });

        // Handle status changes
        document.getElementById("statusSelect").addEventListener("change", function (event) {
            connection.invoke("UpdateStatus", event.target.value)
                .catch(function (err) {
                    console.error(err);
                });
        });

        function sendMessage() {
            if (!selectedUserId) return;

            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (message) {
                connection.invoke("SendMessage", selectedUserId, message)
                    .catch(function (err) {
                        console.error(err);
                    });

                messageInput.value = "";
            }
        }

        function updateUserStatus(userId, status) {
            const statusElement = document.getElementById(`status-${userId}`);
            if (statusElement) {
                statusElement.textContent = status;
                statusElement.className = `badge ${status === 'Online' ? 'bg-success' : 'bg-secondary'}`;
            }

            // Update online users list
            updateOnlineUsersList(userId, status);
        }

        function updateOnlineUsersList(userId, status) {
            const userElement = document.querySelector(`#onlineUsersList li[data-user-id="${userId}"]`);
            if (userElement) {
                const statusBadge = userElement.querySelector('.badge');
                statusBadge.textContent = status;
                statusBadge.className = `badge ${status === 'Online' ? 'bg-success' : 'bg-secondary'}`;
            }
        }

        async function loadUserInfo(userId) {
            try {
                const response = await fetch(`/Contacts/GetUserInfo/${userId}`);
                const user = await response.json();
                document.getElementById('selectedUserName').textContent = `Chatting with: ${user.userName}`;
            } catch (error) {
                console.error('Error loading user info:', error);
            }
        }

        async function loadPreviousMessages(userId) {
            try {
                const messagesList = document.getElementById("messagesList");
                messagesList.innerHTML = ''; // Clear placeholder message

                const response = await fetch(`/Chat/GetMessages?userId=${userId}`);
                const messages = await response.json();

                messages.forEach(message => {
                    const messageDiv = document.createElement("div");
                    const isReceived = message.senderId === selectedUserId;

                    messageDiv.classList.add("alert", isReceived ? "alert-info" : "alert-success", "mb-2");
                    messageDiv.textContent = `${message.senderName} (${new Date(message.timestamp).toLocaleTimeString()}): ${message.content}`;
                    messagesList.appendChild(messageDiv);
                });

                messagesList.scrollTop = messagesList.scrollHeight;
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }
    </script>
}